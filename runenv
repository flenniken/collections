#!/bin/bash

# Work with the collections docker build environment.  Type runenv with
# no arguments to see the available commands.

collectionsImage="collections-image"
collectionsContainer="collections-container"

rootDir=$(pwd)
dockerFolder=$rootDir/env/debian
dockerFile=$dockerFolder/Dockerfile

option=$1

function runMe() {
  ## Create the image or run the container.

  # Create the image if missing.
  imageExists=$(docker inspect $collectionsImage 2>/dev/null | grep "Id" | grep "sha256:")
  if [[ "${imageExists}" == "" ]]; then

    echo "The $collectionsImage does not exist, creating it..."

    # docker build --no-cache --tag=$collectionsImage $dockerFolder
    docker build --tag=$collectionsImage $dockerFolder

    echo "If no errors, run again to run the container."
    exit

  else

    # Run the container.
    status=$(docker inspect $collectionsContainer 2>/dev/null | grep Status)
    mapports='-p 127.0.0.1:8000:8000'
    case $status in
      *running*)
        echo "The $collectionsContainer is running, attaching to it..."
        docker attach $collectionsContainer
        ;;
      *exited*)
        echo "The $collectionsContainer exists but its not running, starting it..."
        docker start -ai $collectionsContainer
        ;;
      *)
        echo "The $collectionsContainer does not exist, creating it..."
        shared_option="-v $rootDir:/home/coder/collections"
        docker run $mapports --name=$collectionsContainer -it $shared_option $collectionsImage
        ;;
    esac 

  fi
}

function deleteMe() {
  ## Delete the container and image.
    
  # Delete the container if it exists and isn't running.
  status=$(docker inspect $collectionsContainer 2>/dev/null | grep Status)
  case $status in
    *running*)
      echo "The container is running, exit it and try again."
      exit
      ;;
    *exited*)
      echo "Deleting the container"
      docker rm $collectionsContainer 2>&1 >/dev/null
      ;;
  esac 

  # Delete the image if it exists.
  imageExists=$(docker inspect $collectionsImage 2>/dev/null | grep "Id" | grep "sha256:")
  if [[ "${imageExists}" != "" ]]; then
    echo "Deleting the image."
    docker image rm $collectionsImage 2>&1 >/dev/null
  fi
}

function listMe() {
  ## List the container and image.

  imageStatus=$(docker inspect $collectionsImage 2>/dev/null)
  if [[ "${imageStatus}" == "[]" ]]; then
    echo "no $collectionsImage"
  else
    echo "The $collectionsImage exists."
  fi

  containerStatus=$(docker inspect $collectionsContainer 2>/dev/null )
  if [[ "${containerStatus}" == "[]" ]]; then
    echo "no $collectionsContainer"
  else
    echo "The $collectionsContainer exists."
  fi
}

function syncMe() {
  ## Rsync dist folder to flenniken.net.
  rsync -a --delete --progress dist/ 1and1:flenniken/site/web/collections/ 
}

# Verify we are running in the root folder by looking for
# the Docker file.
if [ ! -s "$dockerFile" ]; then
  echo "Error: run from the root folder."
  exit
fi

# Make sure we're not running inside the docker container.
if [[ ! -z "${coder_env}" ]]; then
  echo "Error: run on the host not in the docker container."
  exit
fi

case $option in
  d | delete)
    deleteMe
    ;;
  l | list)
    listMe
    ;;
  r | run)
    runMe
    ;;
  s | sync)
    syncMe
    ;;
  *)
    echo "options: run (r),  delete (d),  list (l), sync (s)."
    ;;
esac 

exit

