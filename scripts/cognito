#!/usr/bin/python3

# This is the help text shown with -h:

"""
This script is for setting up the cognito login system and managing users.

"""

import os

if not os.environ.get("coder_env"):
  print("Run from the Collection's docker environment.")
  exit(1)

import sys
import argparse
import traceback
import sys
import signal
import unittest
import urllib.parse
from collections import namedtuple
import json
import requests
import jwt
import subprocess
import sys
import textwrap
import tomllib
import boto3
import datetime

class CognitoException(Exception):
  """ An exception we plan for. """
  pass

def getAttributes(cognito_attributes):
  """
  Convert the cognito attributes to a dictionary.
  """
# 'Attributes': [{'Name': 'email', 'Value':
#   'steve.flenniken@gmail.com'}, {'Name': 'family_name', 'Value':
#   'Flenniken'}, {'Name': 'given_name', 'Value': 'Steve'}, {'Name':
#   'custom:admin', 'Value': '0'}]
#
# { 'email': 'steve.flenniken@gmail.com', 'family_name': 'Flenniken', 'given_name': 'Steve', 'custom:admin': 0}
  result = {}
  for d in cognito_attributes:
    result[d['Name']] = d['Value']
  return result

def printDateTime(dt):
  """
  Print time like: 2024-05-05 21:41:57 UTC
  """
  # https://strftime.org/
  # https://en.wikipedia.org/wiki/ISO_8601
  # return dt.strftime("%Y-%m-%dT%H:%M:%S%z")
  # return dt.astimezone().replace(microsecond=0).isoformat()
  return dt.strftime("%Y-%m-%d %H:%M:%S %Z")

def listUsers():
  """
  Show the users.
  """
  client = getCognitoBoto3Client()
  userPoolId = "us-west-2_Lm2lu6ocX"
  response = client.list_users(
    UserPoolId=userPoolId,
    AttributesToGet=[ "email", "given_name", "family_name", 'custom:admin']
  )
  users = response['Users']

  print("id enabled admin status first last email created")
  for user in users:
    a = getAttributes(user['Attributes'])
    # print(f"email: {a['email']}")
    # print(f"given_name: {a['given_name']}")
    # print(f"family_name: {a['family_name']}")
    # print(f"custom:admin: {a['custom:admin']}")
    # print(f"Username: {user['Username']}")
    # print(f"UserCreateDate: {printDateTime(user['UserCreateDate'])}")
    # print(f"UserLastModifiedDate: {printDateTime(user['UserLastModifiedDate'])}")
    # print(f"Enabled: {user['Enabled']}")
    # print(f"Enabled: {user['UserStatus']}")

    # Print a user per line.
    print(f"\
{user['Username']} \
{user['Enabled']} \
{a['custom:admin']} \
{user['UserStatus']} \
{a['given_name']} \
{a['family_name']} \
{a['email']} \
{printDateTime(user['UserCreateDate'])}")

def getCognitoBoto3Client():
  """
  Return the boto3 cognito client.
  """
  configFilename = "/home/coder/.aws/config"
  credsFilename = "/home/coder/.aws/credentials"
  if not os.path.exists(configFilename) or not os.path.exists(credsFilename):
     raise CognitoException("""\

Before this script can access your aws cognito user pool, you need an
AWS account and an IAM user with with AmazonCognitoPowerUser
permissions.

Run "aws configure" and specify the IAM user's credentials.
""")
  return boto3.client('cognito-idp')

def writeCognitoConfig(poolName, domainPrefix):
  """
  Write the cognito config file: ~/.aws/cognito-config given the pool name.
  """
  client = getCognitoBoto3Client()

  # Get the cognito user pools.
  response = client.list_user_pools(MaxResults=30)
  userPools = response['UserPools']

  # Find the user pool with the passed in name.
  userPoolId = None
  print("User Pools:")
  for ix, userPool in enumerate(userPools):
    name = userPool['Name']
    id = userPool['Id']
    print(f"  {ix+1} {name} {id}")
    if name == poolName:
      userPoolId = id
  print()

  if userPoolId is None:
    # The specified pool was not found.
    raise CognitoException(f"The pool name doesn't exist: {poolName}")

  # Get the pool's application clients.
  response = client.list_user_pool_clients(
    UserPoolId=userPoolId,
    MaxResults=30,
  )

  # Find the collections client.
  collectionsClientName = "CollectionsClient"
  client_id = None
  print("Application clients:")
  userPoolClients = response["UserPoolClients"]
  for ix, userPoolClient in enumerate(userPoolClients):
    name = userPoolClient['ClientName']
    id = userPoolClient['ClientId']
    print(f"  {ix+1} {name} {id}")
    if name == collectionsClientName:
      client_id = id
  print()
  if client_id is None:
    raise CognitoException(
      f"The pool doesn't have an application client called {collectionsClientName}.")

  response = client.describe_user_pool_client(
    UserPoolId=userPoolId, ClientId=client_id)

  userPoolClient = response['UserPoolClient']
  assert userPoolClient['ClientName'] == 'CollectionsClient'

  print(f"{collectionsClientName}:")
  for k, v in userPoolClient.items():
    if isinstance(v, datetime.datetime):
      value = printDateTime(v)
    else:
      value = repr(v)
    print("  %s: %s" % (k, value))
  print()

  callbackURLs = userPoolClient['CallbackURLs']
  if len(callbackURLs) != 1:
    raise CognitoException(f"Expected one callback (redirect_uri) but got: {len(callbackURLs)}")
  redirect_uri = callbackURLs[0]

  logoutURLs = userPoolClient['LogoutURLs']
  if len(logoutURLs) != 1:
    raise CognitoException(f"Expected one callback (logout_uri) but got: {len(logoutURLs)}")
  logout_uri = logoutURLs[0]

  # Is it possible to query cognito for the domain prefix?

  response = client.describe_user_pool_domain(Domain=domainPrefix)
  domainDescription = response['DomainDescription']
  print("DomainDescription:")
  if len(domainDescription) == 0:
    raise CognitoException(f"  The domain prefix doesn't exist: {domainPrefix}")
  for k, v in domainDescription.items():
    if isinstance(v, datetime.datetime):
      value = printDateTime(v)
    else:
      value = repr(v)
    print("  %s: %s" % (k, value))
  print()

  ## cognito domain

  # UserPoolId: 'us-west-2_Lm2lu6ocX'
  region = domainDescription['UserPoolId'].split('_')[0]
  domain = f"https://{domainPrefix}.auth.{region}.amazoncognito.com"
  print(f"domain: {domain}")
  print()

  # Hard code the scope.
  scope = "openid profile"

  config = {}
  config['client_id'] = client_id
  config['redirect_uri'] = redirect_uri
  config['logout_uri'] = logout_uri
  config['scope'] = scope
  config['domain'] = domain

  # Write the cognito config file: ~/.aws/cognito-config.
  filename = "/home/coder/.aws/cognito-config"
  with open(filename, 'w') as fp:
    fp.write(json.dumps(config))

  print(f"""\
Wrote the cognito config file. View it with:

  cat {filename} | jqless
""")

def process(args):
  """
  """
  if args.listUsers:
    listUsers()
  elif args.writeCognitoConfig:
    print(args)
    poolName = args.writeCognitoConfig[0][0]
    domainPrefix = args.writeCognitoConfig[0][1]
    writeCognitoConfig(poolName, domainPrefix)
  else:
    showHelp()

def parseCommandLine():
  """
  Parse the command line arguments.
  """
  if len(sys.argv) == 1:
    # When there are no arguments provided, show the help information.
    sys.argv.append("-h")
  else:
    # When -t is provided, change argv so unittest does not see it.
    for ix, arg in enumerate(sys.argv[1:]):
      if arg in ['-t', '--test']:
        sys.argv.pop(ix+1)
        args = argparse.Namespace(test = True)
        return args

  # Use this module's comment at the top of the file for the
  # description.
  parser = argparse.ArgumentParser(
  prog='PROG', formatter_class=argparse.RawDescriptionHelpFormatter,
  description=textwrap.dedent(__doc__))

  parser.add_argument("-t", "--test", action="store_true",
    help="run internal unit tests. Use alone to run all tests.")
  parser.add_argument("--createPool", metavar='pool-name',
    help="Not Implemented: Create a cognito pool for use with collections. Specify the pool name, e.g. collections-pool")
  parser.add_argument("-w", "--writeCognitoConfig", nargs=2, action="append",
    help="write the ~/.aws/cognito-config file. Example: [scripts/cognito -w collections-pool collections]",
    type=str, metavar=("pool-name", "domainPrefix"))

  parser.add_argument("-l", "--listUsers", action="store_true",
    help="show the collections users")
  parser.add_argument("--createUser", action="store_true",
    help="Not Implemented: create a new user")
  parser.add_argument("--editUser", metavar='user-id',
    help="Not Implemented: edit an existing user")

  args = parser.parse_args(sys.argv[1:])
  return args

def signalHandler(sig, frame):
  """ Handle ctrl-C """
  sys.exit(1)

def main(args):
  signal.signal(signal.SIGINT, signalHandler)
  try:
    process(args)
  except KeyboardInterrupt:
    print("\nStopping")
  except CognitoException as ex:
    print(str(ex))
  except Exception as ex:
    print("Unexpected exception")
    print(traceback.format_exc())
    return 1
  return 0 # success

class TestCognito(unittest.TestCase):

  def test_me(self):
    self.assertEqual(True, bool(1))
    self.assertEqual(False, bool(0))

  def test_getAttributes(self):
    cognito_attributes = [
      {'Name': 'email', 'Value': 'steve.flenniken@gmail.com'},
      {'Name': 'family_name', 'Value': 'Flenniken'},
      {'Name': 'given_name', 'Value': 'Steve'},
      {'Name': 'custom:admin', 'Value': '0'}
    ]
    d = getAttributes(cognito_attributes)
    self.assertEqual(d['email'], 'steve.flenniken@gmail.com')
    self.assertEqual(d['family_name'], 'Flenniken')
    self.assertEqual(d['given_name'], 'Steve')
    self.assertEqual(d['custom:admin'], '0')


if __name__ == '__main__':
  args = parseCommandLine()
  if args.test:
    sys.exit(unittest.main())
  rc = main(args)
  sys.exit(rc)
